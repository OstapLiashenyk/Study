import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import tensorflow as tf
from keras import layers, models
import matplotlib.pyplot as plt
import seaborn as sns
import os

def load_image_data():
    df = pd.read_csv('datasets/fer2013/fer2013.csv')

    def preprocess_image(image):
        image = np.fromstring(image, sep=' ').reshape((48, 48, 1))
        image = tf.image.resize(image, (64, 64))
        return image

    X = np.array([preprocess_image(img) for img in df['pixels']])
    y = df['emotion'].values

    X = X / 255.0

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    return np.array(X_train), np.array(X_test), np.array(y_train), np.array(y_test)


def plot_confusion_matrix(y_true, y_pred, classes):
    cm = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(10, 8))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=classes, yticklabels=classes)
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.title('Confusion Matrix')
    plt.show()


def cnn_image_classifier(X_train, y_train, X_test, y_test, class_names):
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.Flatten(),
        layers.Dense(64, activation='relu'),
        layers.Dense(10, activation='softmax')
    ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))
    y_pred = np.argmax(model.predict(X_test), axis=-1)

    print("CNN Image Classifier Results")
    print(classification_report(y_test, y_pred))
    plot_confusion_matrix(y_test, y_pred, class_names)


def transfer_learning_image_classifier(X_train, y_train, X_test, y_test, class_names):
    base_model = tf.keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(64, 64, 3))
    base_model.trainable = False

    inputs = tf.keras.Input(shape=(64, 64, 1))
    x = layers.Conv2D(3, (1, 1))(inputs)

    x = base_model(x, training=False)
    x = layers.GlobalAveragePooling2D()(x)
    x = layers.Dense(64, activation='relu')(x)
    outputs = layers.Dense(10, activation='softmax')(x)

    model = tf.keras.Model(inputs, outputs)

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])

    model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test))
    y_pred = np.argmax(model.predict(X_test), axis=-1)

    print("Transfer Learning Image Classifier Results")
    print(classification_report(y_test, y_pred))
    plot_confusion_matrix(y_test, y_pred, class_names)

def main():
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    os.environ['TF_ENABLE_ONEDNN_OPTS'] = '0'


    np.random.seed(42)
    tf.random.set_seed(42)

    X_image_train, X_image_test, y_image_train, y_image_test = load_image_data()

    class_names = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']


    cnn_image_classifier(X_image_train, y_image_train, X_image_test, y_image_test, class_names)
    transfer_learning_image_classifier(X_image_train, y_image_train, X_image_test, y_image_test, class_names)


if __name__ == "__main__":
    main()
